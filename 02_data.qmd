---
title: "{{< iconify bxs data >}} Data Sets"
author: "Luis Sarmiento"
format: 
  html: 
    toc: true
    warning: false
    code-fold: true
    code-summary: "Show the Code"
    fontsize: "16px"
---

This page presents an overall description of the data sets I use to analyze the effect of New York City Air Quality Health Advisories on school absences.

Researchers can access the data I use to generate these files in the [dropbox repository](https://www.dropbox.com/sh/1jyjs84sef7t1nt/AABtbantKPm4OyICNEIklpXLa?dl=0)

# {{< iconify emojione-monotone school >}} School Absences


```{r}
#| echo: false
# Set the path of the R-studio project
file = gsub("AQAs_SchoolAbsences_NYC", "", getwd())
# Load the data set
RawAbsent = read_rds(paste0(file, "02_GenData/RawAbsences.rds"))
location = read_rds(paste0(file,"02_GenData/01_schools/location.rds"))
dem = read_rds(paste0(file,"02_GenData/SchoolDemographics.rds"))
prof = read_rds(paste0(file,"02_GenData/proficiency.rds"))
```


I obtain data on school absences from the NYC open data-portal website. @tbl-RawAbsent shows the structure of the data. There are `r comma(nrow(RawAbsent))` observations in the panel with `r comma(length(unique(RawAbsent$id)))` unique school identifiers. The data set spans between `r min(month(RawAbsent$date, label = T))` `r min(year(RawAbsent$date))` and `r max(month(RawAbsent$date, label = T))` `r max(year(RawAbsent$date))`. It contains the school's id, the observation date, and the total number of enrolled, present, absent, and released students. It also includes a categorical variable indicating if an abnormal event affected school absences on that date, e.g., extreme weather events like blizzards or hurricanes. I further obtain data on the location of each school. @tbl-SchoolsLocation contains the school's type, id, longitude, latitude, tract, neighbourhood, and borough. @tbl-SchoolsDemographics presents socio-demographic data obtained from the New York State Department of Education (NYSDE). The table contains the school's id, year of observation, count of enrolled students, and the share of female, male, Asian, Hispanic, Black, and White students. Other variables include the share of students with disabilities, learning English, qualifying for free or reduced price lunch, being eligible for human resources administration benefits (poverty), or facing economic hardship (eni). Finally, Table @tbl-SchoolsProf contains the school id, the year of observation (only available from 2014), the share of students passing the English Language Art (ELA) and Mathematics (math) tests, and the percentage of fourth-year and sixth-year graduates.

::: panel-tabset

## Absences
```{r}
#| label: tbl-RawAbsent
#| tbl-cap: Structure of the raw file on school absences in NYC
#| tbl-cap-location: top
#| echo: false
# Show the data set
kbl(head(select(RawAbsent, id:released, DayType), 3)) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue")
```
## Location

```{r}
#| label: tbl-SchoolsLocation
#| tbl-cap: Data on the spatial location of schools in NYC
#| tbl-cap-location: top
#| echo: false
# Show the data set
kbl(head(location, 3)) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue") |> 
  footnote(general = " lon = Longitude, lat = Latitude, tract = US Census Tract, nta = neighborhood, boro = borough, SchholType = type of school", general_title = "Notes:", footnote_as_chunk = T, fixed_small_size = T, 
           threeparttable = T)


```

## Demographics
```{r}
#| label: tbl-SchoolsDemographics
#| tbl-cap: Demographic data for NYC schools
#| tbl-cap-location: top
#| echo: true
# Show the data set
kbl(head(dem, 3)) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue") %>% 
   footnote(general = "id refers to School ID and students to the count of enrolled students in that school and year combinations. Each of the other columns contains the percentage of students within each category, e.g., female refers to the share of female students in the school. The poverty column refers to the share of students qualifying for free or reduced-price lunch or eligible for Human Resources Administration benefits. The eni column refers to the share of students facing economic hardship.", general_title = "Notes:", footnote_as_chunk = T)
```

## Proficiency 
```{r}
#| label: tbl-SchoolsProf
#| tbl-cap: Proficiency data for NYC schools
#| tbl-cap-location: top
#| echo: true
# Show the data set
kbl(head(prof, 3)) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue") %>% 
   footnote(general = "id refers to School ID and. Each of the other columns contains the percentage of students within each category; e.g., ela refers to the share of students passing the English Learning Art test. The math column refers to the share of students passing the Mathematics test. And the Graduates4th and 6th columns refer to the share of graduates in each year respectively.", general_title = "Notes:",  footnote_as_chunk = T)
```
:::

# {{< fa chart-line >}} Forecasts of the air quality index

```{r}
#| echo: false 
# Set the path of the R-studio project
file = gsub("AQAs_SchoolAbsences_NYC", "", getwd())
# Load the AQI data sets
RawAqi = read_rds(paste0(file, "02_GenData/02_aqi/RawAqi.rds"))
Full = read_rds(paste0(file, "02_GenData/02_aqi/RawAqiFull.rds"))
AqiForecast = read_rds(paste0(file, "02_GenData/02_aqi/AqiForecast.rds"))
```

The data on the air quality index (AQI) forecasts come from the New York State Department of Environmental Conservation (NYSDEC).^[The data is not publicly available. Instead, we sent an email to the NYSDEC asking them to provide the forecasted values under the freedom of information act. They were kind enough to give the entirety of predicted dates between 2008 and 2018] @tbl-RawFullb contains a sample of the raw data. It includes the issue date, forecast date, emission lag, and forecasted value of ozone (o3), fine particulate matter (pm25), and the air quality index (AQI). The issue date is the date the NYSDEC estimated the forecast, and the emission lag is the difference between the issue and forecast dates.


```{r}
#| label: tbl-RawFullb
#| tbl-cap: Raw data on the Air Quality Index
#| tbl-cap-location: top
#| echo: false
# Show the data set
kbl(head(select(Full, IssueDate:aqi), 2), bottomrule = T, toprule = T) %>% 
  kable_classic(full_width = F, html_font = "Arial Narrow") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue")

```

It is relevant to distinguish between the issue and forecast dates. The issue date is the date that the NYSDEC performs the forecast. the forecast date is the date of the forecast. For instance, the NYSDEC can forecast an AQI value of 105 for May 1st on April 29th. In this example, April 29th is the issue date, and May 1st the forecast date. It is worth noting that forecasts can have different issue dates. For instance, there can be three forecasts for January 1st.


@tbl-ForecastIndicators contains a series of dummy and categorical variables to understand the nature of each forecast. The column *SingleForecast* indicates situations when only one issued forecast for that particular date exists. For example, if there were two forecasts for January 1st, one on December 30th and the other on the 31st, the value of this column would be zero. The *ForecastType* is a categorical variable that indicates the structure of issued forecasts for that particular date, e.g., Forecast (0, -2) means that there was a forecast issued at $t = 0$ and $t = -2$. The *SameDay* variable is equal to one if the issue and forecast dates occur on the same day. The same logic holds for *NextDay*, *TwoDays*, *ThreeDays*, and *FourDays*. For instance, a value of 1 in the *FourDays* column occurs when the issue date is four days before the forecast.

```{r}
#| label: tbl-ForecastIndicators
#| tbl-cap: Raw data on the Air Quality Index (Forecast Indicators)
#| tbl-cap-location: top
#| echo: false
# Show the data set
kbl(head(select(Full, IssueDate:ForecastDate, aqi, 
                SingleForecast, ForecastType, SameDay:FourDays), 2), 
    booktabs = T) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue") 
```


@tbl-AlertIndicators includes a set of variables on the emission of an air quality alert (AQA). The *alert* column is an indicator variable equal to one if the AQI forecast exceeds one hundred units. The *FullAlert* column is one when all forecasts on that date predict an alert. *SingleAlert* is one if only one forecast is higher than one hundred units. *OnlySameDayAlert* is one when there is only one same-day forecast. And *NextAndSameDayAlert* is equal to one if there were two issues for the same forecast -- one on the date of the forecast and the other one day before.

```{r}
#| label: tbl-AlertIndicators
#| tbl-cap: Raw data on the Air Quality Index (Alert Indicators)
#| tbl-cap-location: top
#| echo: false
# Show the data set
kbl(head(select(Full, IssueDate:ForecastDate, aqi,
                alert, FullAlert, SingleAlert:TwoDaysSingleAlert), 2), 
    bottomrule = T, toprule = T) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue")


```

@fig-TypeAll and @fig-TypeAlerts show the share of observations with specific combinations of issued forecasts. For the full sample 63% of forecasts were issued one day before and at the date of the alert. For the sub-sample of days with an air quality alert, this number increases to 67%. This combination of different forecasts raises one clear issue; if we want to assign one single value per date, which one of the forecasts should we choose? For this, use the following algorithm:

::: incremental
-   For the days without an alert, we select the AQI forecast closest to $t$. For instance, if the AQI value for January 1st has one forecast on December 31st and another on December 30th, we select the 31st as the value of the forecasted AQI.
-   For days when there is an alert, and all forecasts imply an AQI value higher than 100 units, we choose the forecast closest to $t$
-   When there is a discrepancy between two forecasts regarding the existence of an AQA, we choose the highest. For instance, the forecast at $t = 0$ implies an AQI value of 93 and the one at $t = 1$ a value of 101. In this situation, we will assign the value of 101.
:::

:::: {.columns}

::: {.column width='50%'}
```{r}
#| label: fig-TypeAll
#| fig-cap: Forecast type across the full sample of forecasted AQIs
#| fig-cap-location: top
#| echo: false
#| fig-width: 6
#| fig-height: 4
# Create the plot data
plot = Full %>% group_by(ForecastType) %>% summarise(count = n()) %>% ungroup() %>% 
  mutate(share = (count/sum(count))*100)
# Ggplot
ggplot(plot) + geom_bar(aes(y = reorder(ForecastType, -share), x = share, fill = share), stat = "identity") +
  theme_economist()  %+replace% 
  theme(legend.title = element_blank(), plot.background = element_blank()) + 
  labs(x = "Percentage share of observations", y = "") + grids("y") +
    scale_fill_viridis() + guides(fill = "none")
```
:::

::: {.column width='50%'}
```{r}
#| label: fig-TypeAlerts
#| fig-cap: Forecast type for the dates with an AQA
#| fig-cap-location: top
#| echo: false
#| fig-width: 6
#| fig-height: 4
# Create the plot data
plot = Full %>% dplyr::filter(alert == 1) %>% group_by(ForecastType) %>% 
  summarise(count = n()) %>% ungroup() %>% 
  mutate(share = (count/sum(count))*100)
# Ggplot
ggplot(plot) + geom_bar(aes(y = reorder(ForecastType, -share), x = share, fill = share), 
                        stat = "identity") + theme_economist()  %+replace% 
 theme(legend.title = element_blank(), plot.background = element_blank()) + 
  labs(x = "Percentage share of observations", y = "") + grids("y") +
  scale_fill_viridis() + guides(fill = "none")
```
:::

::::

@tbl-AqiForecast shows the first rows of the final data set on the AQU forecast. In it ***date*** is the date of the forecast. ***ForecastType*** is the type of forecast as previously defined. ***pm25, o3, and aqi*** are the forecasted values of fine particulate matter, ozone, and the air quality index. ***alert*** is an indicator variable equal to one when the AQI is larger than 100. I also include a set of indicator variables on the structure of the forecast, i.e., was it a single alert? Did all the forecasts point to the emission of an alert?

```{r}
#| label: tbl-AqiForecast
#| tbl-cap: Final data set on the forecast of the AQI
#| tbl-cap-location: top
#| echo: true
# Show the data set
kbl(head(filter(AqiForecast, alert == 1), 3)) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue") 
```


# {{< fa smog >}} Data on the air quality index

```{r}
#| echo: false 
# Load the AQI data sets
aqi = read_rds(paste0(file, "02_GenData/02_aqi/RealAqi.rds"))

```

I obtain AQI measurements from the Environmental Protection Agency (EPA) pre-generated data files. At each point, the AQI for county $i$ at time $t$ is the maximum AQI across all stations and measured contaminants on that day. @tbl-AqiReal shows the structure of the AQI data. It contains the observation date and the AQI values for each city borough.

```{r}
#| label: tbl-AqiReal
#| tbl-cap: Values of the AQI in NYC
#| tbl-cap-location: top
#| echo: true
# Show the data set
kbl(head(aqi, 5), booktabs = T) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue")
```

# {{< fa people-group >}} Economic and demographic covariates

```{r}
#| echo: false 
econ = read_rds(paste0(file, "02_GenData/03_dem/econ.rds"))
dem = read_rds(paste0(file,"02_GenData/03_dem/dem.rds"))
soc = read_rds(paste0(file,"02_GenData/03_dem/soc.rds"))
hosp = read_rds(paste0(file,"02_GenData/03_dem/AsthmaHosp.rds"))
er = read_rds(paste0(file,"02_GenData/03_dem/AsthmaEr.rds"))
```

I collect different economic, demographic, and health covariates at the neighbourhood level from two primary sources; for socio-demographic variables, we use public data from the American Community Survey between 2012-2016. For the health data, we use the information on children asthma-related hospitalization and ER admissions from the New York State Department of Health.

::: panel-tabset
## Economic

```{r}
#| label: tbl-econ
#| tbl-cap: Sample of economic covariates
#| tbl-cap-location: top
#| echo: true
kbl(head(econ, 5)) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue") %>% 
   footnote(general = "nta = Name of the neighborhood, ntacode = Code of the neighborhood, 
            boro = Name of the borough, FemaleLF = share of working age women at work, 
            MeanIncome = Average income, MedianIncome = Median Income" , general_title = "Notes:", footnote_as_chunk = T)
```

## Demographic

```{r}
#| label: tbl-dem
#| tbl-cap: Sample of demographic covariates
#| tbl-cap-location: top
#| echo: true
kbl(head(dem, 5)) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue") %>% 
   footnote(general = "nta = Name of the neighborhood, ntacode = Code of the neighborhood, 
            boro = Name of the borough, ShareHisp = share of Hispanic persons, 
            ShareWhite = Share of white persons, ShareBlack = Share of black persons", general_title = "Notes:", footnote_as_chunk = T)
```

## Social

```{r}
#| label: tbl-soc
#| tbl-cap: Sample of social covariates
#| tbl-cap-location: top
#| echo: true
kbl(head(soc, 5)) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue") %>% 
   footnote(general = "nta = Name of the neighborhood, ntacode = Code of the neighborhood,  boro = Name of the borough,
   SingleParents = share of single-parent households, GrandParentsAid = share of families with help from grandparents,
   LessThanHighschool = share of persons that did not complete high school, Bachelor = share of persons with a bachelor's degree, 
   EnglishOnly = share of persons that only communicate in English", 
            general_title = "Notes:", footnote_as_chunk = T)

```

## Hospitalizations

```{r}
#| label: tbl-hosp
#| tbl-cap: Sample of asthma-related hospitalizations
#| tbl-cap-location: top
#| echo: true
kbl(head(hosp, 5)) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue") %>% 
   footnote(general = "nta = Name of the neighborhood, ntacode = Code of the neighborhood, 
            HospChildren = Number of children going to the hospital because of asthma, 
            HospChildRate = Rate of children going to the hospital because of asthma (per 10,000), 
            SmallSampleIndicator = Indicator variable equal to one if the sample is too small", 
            general_title = "Notes:", footnote_as_chunk = T)
```

## ER Admissions

```{r}
#| label: tbl-er
#| tbl-cap: Sample of children ER admissions
#| tbl-cap-location: top
#| echo: true
kbl(head(er, 5)) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue") %>% 
   footnote(general = "nta = Name of the neighborhood, ntacode = Code of the neighborhood, 
            ErAdmissions = Number of children going to the ER because of asthma, 
            HospChildRate = Rate of children going to the ER because of asthma (per 10,000), 
            SmallSampleIndicator = Indicator variable equal to one if the sample is too small", general_title = "Notes:", footnote_as_chunk = T)
```
:::

# {{< fa umbrella >}} Weather

```{r}
weather = read_rds(paste0(file, "02_GenData/03_weather/NycGsod.rds"))
```

I obtain weather data from the Global Surface Summary of the Day provided by the US National Centres for Environmental Information (NCEI). Table @tbl-WeatherData shows the structure of the weather data. For each date between January 2006 and December 2018, I have daily average, minimum, and maximum temperature, atmospheric pressure, wind speed, precipitation, and relative humidity.

```{r}
#| label: tbl-WeatherData
#| tbl-cap: Weather data for New York City
#| tbl-cap-location: top
#| echo: true
# Show the data set
kbl(head(weather, 2)) %>% 
  kable_classic(full_width = F, html_font = "Cambria") %>% 
  kable_styling(bootstrap_option = c("hover")) |> 
  column_spec(c(1), italic = T, color = "DarkBlue") %>% 
   footnote(general = str_wrap("tmp = Average temperature, MinTmp = Minimum temperature, 
            MaxTmp = Maximum temperature, dew = Dew point, atm = Atmospheric Pressure, 
            wsp = Wind speed, rain = Precipitation, rh = Relative humidity. 
            All temperatures in celsius and precipitation in millimeters", 75), general_title = "Notes:", footnote_as_chunk = T)
```
